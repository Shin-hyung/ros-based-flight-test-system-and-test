// Generated by gencpp from file dift_sw/state.msg
// DO NOT EDIT!


#ifndef DIFT_SW_MESSAGE_STATE_H
#define DIFT_SW_MESSAGE_STATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace dift_sw
{
template <class ContainerAllocator>
struct state_
{
  typedef state_<ContainerAllocator> Type;

  state_()
    : stamp()  {
    }
  state_(const ContainerAllocator& _alloc)
    : stamp()  {
  (void)_alloc;
    }



   typedef ros::Time _stamp_type;
  _stamp_type stamp;





  typedef boost::shared_ptr< ::dift_sw::state_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dift_sw::state_<ContainerAllocator> const> ConstPtr;

}; // struct state_

typedef ::dift_sw::state_<std::allocator<void> > state;

typedef boost::shared_ptr< ::dift_sw::state > statePtr;
typedef boost::shared_ptr< ::dift_sw::state const> stateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dift_sw::state_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dift_sw::state_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dift_sw::state_<ContainerAllocator1> & lhs, const ::dift_sw::state_<ContainerAllocator2> & rhs)
{
  return lhs.stamp == rhs.stamp;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dift_sw::state_<ContainerAllocator1> & lhs, const ::dift_sw::state_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dift_sw

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::dift_sw::state_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dift_sw::state_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dift_sw::state_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dift_sw::state_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dift_sw::state_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dift_sw::state_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dift_sw::state_<ContainerAllocator> >
{
  static const char* value()
  {
    return "84d365d08d5fc49dde870daba1c7992c";
  }

  static const char* value(const ::dift_sw::state_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x84d365d08d5fc49dULL;
  static const uint64_t static_value2 = 0xde870daba1c7992cULL;
};

template<class ContainerAllocator>
struct DataType< ::dift_sw::state_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dift_sw/state";
  }

  static const char* value(const ::dift_sw::state_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dift_sw::state_<ContainerAllocator> >
{
  static const char* value()
  {
    return "time stamp\n"
;
  }

  static const char* value(const ::dift_sw::state_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dift_sw::state_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.stamp);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct state_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dift_sw::state_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dift_sw::state_<ContainerAllocator>& v)
  {
    s << indent << "stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.stamp);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DIFT_SW_MESSAGE_STATE_H
